
push eax = 0x50
push ecx = 0x51
push edx = 0x52



callback code
- get jnienv (get vm proc address, call, cacheable) (could be done outside)
- get class (could be done outside)
- get method (could be done outside) (this is static - it is Callback.internal())
- push args/stack offset (need to know stack size)
- call through with stack pointer and method object
 handle (ie. current stack pointer - size)
- 


grab method id (pass into callback code)
generic callback 

test double cll method.


AssemblyInstructions
- i.mov(EAX, 0x2434);
- i.push(EAX);
- i.mov(ECX, ESP);
- i.label("tempo");
- i.cmp(DL, 0x05);
- i.jne("tempo");
- i.sub(ESP, 8);
- i.call(0x04423433434);
- i.add(ESP, 4);
- i.push(0);
- i.pop(EBP);

- i.write(ByteBuffer b);



Function calling

x86-32

- 




Binding
=======

public class BindingTest 
{
    static {
       Native.bind("kernel32"); //default library
    }
    
    public static native long GetTickCount();
    
    @Native(library="shell32")
    public static native String GetUserName();
}





